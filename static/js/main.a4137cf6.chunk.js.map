{"version":3,"sources":["App.js","index.js"],"names":["genRand","min","max","Math","floor","random","App","useState","userInput","setUserInput","left","setLeft","right","setRight","outputString","setOutputString","inputEl","useRef","className","onSubmit","e","preventDefault","answer","current","value","focus","ref","type","onChange","parseInt","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAGA,SAASA,EAAQC,EAAKC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGzC,SAASK,IAAO,IAAD,EAEQC,mBAAS,MAFjB,mBAEnBC,EAFmB,KAERC,EAFQ,OAGFF,mBAASP,EAAQ,EAAG,IAHlB,mBAGnBU,EAHmB,KAGbC,EAHa,OAIAJ,mBAASP,EAAQ,EAAG,IAJpB,mBAInBY,EAJmB,KAIZC,EAJY,OAKcN,mBAAS,IALvB,mBAKnBO,EALmB,KAKLC,EALK,KAOpBC,EAAUC,mBAsBhB,OACI,sBAAKC,UAAU,aAAf,UACI,sBAAKA,UAAU,WAAf,UAA2BR,EAA3B,MAAoCE,EAApC,UACA,qBAAKM,UAAU,UACf,uBAAMA,UAAU,aAAaC,SAnBf,SAACC,GACnBA,EAAEC,iBACF,IAAMC,EAASZ,EAAOE,EAElBG,EADAO,IAAWd,EACK,kCAEA,iBAAD,OAAQA,EAAR,2BAA0Bc,EAA1B,oDAGnBN,EAAQO,QAAQC,MAAQ,KACxBb,EAAQX,EAAQ,EAAG,IACnBa,EAASb,EAAQ,EAAG,IACpBgB,EAAQO,QAAQE,SAOZ,UACI,uBAAOC,IAAKV,EAASW,KAAK,OAAOC,SAxBvB,SAACR,GACnBX,EAAaoB,SAAST,EAAEU,OAAON,WAwBvB,wBAAQG,KAAK,SAAb,6BAEJ,qBAAKT,UAAU,UACf,qBAAKA,UAAU,SAAf,SAAyBJ,OCxCrCiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.a4137cf6.chunk.js","sourcesContent":["import {React, useState, useRef} from 'react';\nimport './App.css';\n\nfunction genRand(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default function App() {\n\n    const [userInput, setUserInput] = useState(null);\n    const [left, setLeft] = useState(genRand(2, 9));\n    const [right, setRight] = useState(genRand(1, 9));\n    const [outputString, setOutputString] = useState('');\n\n    const inputEl = useRef();\n\n\n    const changeHandler = (e) => {\n        setUserInput(parseInt(e.target.value));\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const answer = left * right;\n        if (answer === userInput) {\n            setOutputString(`정답입니다!`);\n        } else {\n            setOutputString(`제출: ${userInput}, 정답: ${answer}\\n\n            틀렸습니다.`);\n        }\n        inputEl.current.value = null;\n        setLeft(genRand(2, 9));\n        setRight(genRand(1, 9));\n        inputEl.current.focus();\n    }\n\n    return (\n        <div className=\"App-header\">\n            <div className=\"question\">{left} * {right} = ?</div>\n            <div className=\"break\"></div>\n            <form className=\"input-form\" onSubmit={submitHandler}>\n                <input ref={inputEl} type=\"text\" onChange={changeHandler}/>\n                <button type=\"submit\">제출</button>\n            </form>\n            <div className=\"break\"></div>\n            <div className=\"output\">{outputString}</div>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}