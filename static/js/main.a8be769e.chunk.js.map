{"version":3,"sources":["App.js","index.js"],"names":["genRand","min","max","Math","floor","random","App","useState","userInput","setUserInput","left","setLeft","right","setRight","outputString","setOutputString","history","setHistory","winCount","setWinCount","inputEl","useRef","className","onSubmit","e","preventDefault","answer","console","log","prevState","current","value","focus","ref","type","onChange","parseInt","target","map","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAGA,SAASA,EAAQC,EAAKC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGzC,SAASK,IAAO,IAAD,EAEQC,mBAAS,MAFjB,mBAEnBC,EAFmB,KAERC,EAFQ,OAGFF,mBAASP,EAAQ,EAAG,IAHlB,mBAGnBU,EAHmB,KAGbC,EAHa,OAIAJ,mBAASP,EAAQ,EAAG,IAJpB,mBAInBY,EAJmB,KAIZC,EAJY,OAKcN,mBAAS,IALvB,mBAKnBO,EALmB,KAKLC,EALK,OAMIR,mBAAS,IANb,mBAMnBS,EANmB,KAMVC,EANU,OAOMV,mBAAS,GAPf,mBAOnBW,EAPmB,KAOTC,EAPS,KASpBC,EAAUC,mBAyChB,OACI,sBAAKC,UAAU,aAAf,UACI,qBAAKA,UAAU,SAAf,SAAyBR,IACzB,sBAAKQ,UAAU,WAAf,UAA2BZ,EAA3B,MAAoCE,EAApC,UACA,uBAAMU,UAAU,aAAaC,SAvCf,SAACC,GACnBA,EAAEC,iBACF,IAAMC,EAAShB,EAAOE,EAClBc,IAAWlB,GACXO,EAAgB,mCAChBI,EAAYD,EAAW,GACvBS,QAAQC,IAAIV,IAEZH,EAAgB,mCAEpBE,GAAW,SAAAY,GAAS,4BAAQA,GAAR,CAAmB,CACnCnB,KAAMA,EACNE,MAAOA,EACPc,OAAQA,EACRlB,UAAWA,QAEfY,EAAQU,QAAQC,MAAQ,KACxBpB,EAAQX,EAAQ,EAAG,IACnBa,EAASb,EAAQ,EAAG,IACpBoB,EAAQU,QAAQE,SAoBZ,UACI,uBAAOC,IAAKb,EAASc,KAAK,OAAOC,SA5CvB,SAACX,GACnBf,EAAa2B,SAASZ,EAAEa,OAAON,WA4CvB,wBAAQG,KAAK,SAAb,6BAEJ,mEAAgBhB,KAChB,0CACA,8BAtBJF,EAAQsB,KAAI,SAACd,EAAGe,GACZ,OACI,mCACI,0CACSA,EAAQ,EADjB,aACuBf,EAAEd,KADzB,cACmCc,EAAEZ,MADrC,cACgDY,EAAEE,OADlD,KAEI,uBACC,wBAAOF,EAAEhB,UAAT,oBAA6BgB,EAAEE,SAAWF,EAAEhB,UAAY,eAAO,kBAH3D+B,aC3C7BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a8be769e.chunk.js","sourcesContent":["import {React, useState, useRef} from 'react';\nimport './App.css';\n\nfunction genRand(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default function App() {\n\n    const [userInput, setUserInput] = useState(null);\n    const [left, setLeft] = useState(genRand(2, 9));\n    const [right, setRight] = useState(genRand(1, 9));\n    const [outputString, setOutputString] = useState('');\n    const [history, setHistory] = useState([]);\n    const [winCount, setWinCount] = useState(0);\n\n    const inputEl = useRef();\n\n    const changeHandler = (e) => {\n        setUserInput(parseInt(e.target.value));\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const answer = left * right;\n        if (answer === userInput) {\n            setOutputString(`정답입니다!`);\n            setWinCount(winCount + 1);\n            console.log(winCount);\n        } else {\n            setOutputString(`틀렸습니다.`);\n        }\n        setHistory(prevState => [...prevState, {\n            left: left,\n            right: right,\n            answer: answer,\n            userInput: userInput\n        }]);\n        inputEl.current.value = null;\n        setLeft(genRand(2, 9));\n        setRight(genRand(1, 9));\n        inputEl.current.focus();\n    }\n\n    const renderHistory = () =>\n        history.map((e, index) => {\n            return (\n                <>\n                    <li key={index}>\n                        {`Q${index + 1}: ${e.left} * ${e.right} = ${e.answer} `}\n                        <br/>\n                        {`제출: ${e.userInput} 결과: ` + (e.answer === e.userInput ? '정답' : '오답')}\n                    </li>\n                </>\n            );\n        });\n\n    return (\n        <div className=\"App-header\">\n            <div className=\"output\">{outputString}</div>\n            <div className=\"question\">{left} * {right} = ?</div>\n            <form className=\"input-form\" onSubmit={submitHandler}>\n                <input ref={inputEl} type=\"text\" onChange={changeHandler}/>\n                <button type=\"submit\">제출</button>\n            </form>\n            <div>{`정답 횟수: ${winCount}`}</div>\n            <div>History</div>\n            <div>\n                {renderHistory()}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}