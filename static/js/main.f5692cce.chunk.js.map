{"version":3,"sources":["App.js","index.js"],"names":["genRand","min","max","Math","floor","random","App","useState","userInput","setUserInput","leftSeed","setLeftSeed","rightSeed","setRightSeed","left","setLeft","right","setRight","outputString","setOutputString","history","setHistory","winCount","setWinCount","inputEl","useRef","className","onClick","e","parseInt","prompt","alert","onSubmit","preventDefault","answer","console","log","prevState","current","value","focus","ref","type","onChange","target","map","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAGA,SAASA,EAAQC,EAAKC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGzC,SAASK,IAAO,IAAD,EAEQC,mBAAS,MAFjB,mBAEnBC,EAFmB,KAERC,EAFQ,OAGMF,mBAAS,GAHf,mBAGnBG,EAHmB,KAGTC,EAHS,OAIQJ,mBAAS,GAJjB,mBAInBK,EAJmB,KAIRC,EAJQ,OAKFN,mBAASP,EAAQ,EAAGU,IALlB,mBAKnBI,EALmB,KAKbC,EALa,OAMAR,mBAASP,EAAQ,EAAGY,IANpB,mBAMnBI,EANmB,KAMZC,EANY,OAOcV,mBAAS,IAPvB,mBAOnBW,EAPmB,KAOLC,EAPK,OAQIZ,mBAAS,IARb,mBAQnBa,EARmB,KAQVC,EARU,OASMd,mBAAS,GATf,mBASnBe,EATmB,KASTC,EATS,KAWpBC,EAAUC,mBAmDhB,OACI,mCACI,sBAAKC,UAAU,aAAf,UACI,qBAAKA,UAAU,SAAf,SAAyBR,IACzB,sBAAKQ,UAAU,WAAf,UAA2BZ,EAA3B,MAAoCE,EAApC,UACA,6DAAYN,EAAZ,IAAuBE,EAAvB,YACA,wBAAQe,QAvDW,SAACC,GAC5B,IAAMlB,EAAWmB,SACbC,OAAO,qEAAoB,IACzBlB,EAAYiB,SACdC,OAAO,GAAD,OAAIpB,EAAJ,4GAAwC,IAClDqB,MAAM,0EAAD,OAAoBrB,EAApB,YAAgCE,EAAhC,YACLD,EAAYD,GACZG,EAAaD,IAgDL,uCACA,uBAAMc,UAAU,aAAaM,SA1CnB,SAACJ,GACnBA,EAAEK,iBACF,IAAMC,EAASpB,EAAOE,EAClBkB,IAAW1B,GACXW,EAAgB,mCAChBI,EAAYD,EAAW,GACvBa,QAAQC,IAAId,IAEZH,EAAgB,mCAEpBE,GAAW,SAAAgB,GAAS,4BAAQA,GAAR,CAAmB,CACnCvB,KAAMA,EACNE,MAAOA,EACPkB,OAAQA,EACR1B,UAAWA,QAEfgB,EAAQc,QAAQC,MAAQ,KACxBxB,EAAQf,EAAQ,EAAGU,IACnBO,EAASjB,EAAQ,EAAGY,IACpBY,EAAQc,QAAQE,SAuBR,UACI,uBAAOC,IAAKjB,EAASkB,KAAK,OAAOC,SA/C3B,SAACf,GACnBnB,EAAaoB,SAASD,EAAEgB,OAAOL,WA+CnB,wBAAQG,KAAK,SAAb,6BAEJ,mEAAgBpB,KAChB,0CACA,8BAzBRF,EAAQyB,KAAI,SAACjB,EAAGkB,GACZ,OACI,mCACI,0CACSA,EAAQ,EADjB,aACuBlB,EAAEd,KADzB,cACmCc,EAAEZ,MADrC,cACgDY,EAAEM,OADlD,KAEI,uBACC,wBAAON,EAAEpB,UAAT,oBAA6BoB,EAAEM,SAAWN,EAAEpB,UAAY,eAAO,kBAH3DsC,eCvD7BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f5692cce.chunk.js","sourcesContent":["import {React, useState, useRef} from 'react';\nimport './App.css';\n\nfunction genRand(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default function App() {\n\n    const [userInput, setUserInput] = useState(null);\n    const [leftSeed, setLeftSeed] = useState(9);\n    const [rightSeed, setRightSeed] = useState(9);\n    const [left, setLeft] = useState(genRand(2, leftSeed));\n    const [right, setRight] = useState(genRand(1, rightSeed));\n    const [outputString, setOutputString] = useState('');\n    const [history, setHistory] = useState([]);\n    const [winCount, setWinCount] = useState(0);\n\n    const inputEl = useRef();\n\n    const changeDanButtonHandler = (e) => {\n        const leftSeed = parseInt(\n            prompt('몇단까지?(2보다 큰 자연수)', 9));\n        const rightSeed = parseInt(\n            prompt(`${leftSeed}단에서 최대 몇배수까지?(9 이상의 자연수)`, 9));\n        alert(`다음 문제부터 적용됩니다. (${leftSeed}*${rightSeed}단)`);\n        setLeftSeed(leftSeed);\n        setRightSeed(rightSeed);\n    }\n\n    const changeHandler = (e) => {\n        setUserInput(parseInt(e.target.value));\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const answer = left * right;\n        if (answer === userInput) {\n            setOutputString(`정답입니다!`);\n            setWinCount(winCount + 1);\n            console.log(winCount);\n        } else {\n            setOutputString(`틀렸습니다.`);\n        }\n        setHistory(prevState => [...prevState, {\n            left: left,\n            right: right,\n            answer: answer,\n            userInput: userInput\n        }]);\n        inputEl.current.value = null;\n        setLeft(genRand(2, leftSeed));\n        setRight(genRand(1, rightSeed));\n        inputEl.current.focus();\n    }\n\n    const renderHistory = () =>\n        history.map((e, index) => {\n            return (\n                <>\n                    <li key={index}>\n                        {`Q${index + 1}: ${e.left} * ${e.right} = ${e.answer} `}\n                        <br/>\n                        {`제출: ${e.userInput} 결과: ` + (e.answer === e.userInput ? '정답' : '오답')}\n                    </li>\n                </>\n            );\n        });\n\n    return (\n        <>\n            <div className=\"App-header\">\n                <div className=\"output\">{outputString}</div>\n                <div className=\"question\">{left} * {right} = ?</div>\n                <div>출제범위: {leftSeed}*{rightSeed}단</div>\n                <button onClick={changeDanButtonHandler}>단 바꾸기</button>\n                <form className=\"input-form\" onSubmit={submitHandler}>\n                    <input ref={inputEl} type=\"text\" onChange={changeHandler}/>\n                    <button type=\"submit\">제출</button>\n                </form>\n                <div>{`정답 횟수: ${winCount}`}</div>\n                <div>History</div>\n                <div>\n                    {renderHistory()}\n                </div>\n            </div>\n        </>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}